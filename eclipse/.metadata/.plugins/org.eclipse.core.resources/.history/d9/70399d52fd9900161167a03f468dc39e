package com.hzy.alchemycraft.tileentity;

import java.awt.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import com.hzy.alchemycraft.items.ACItems;
import com.hzy.alchemycraft.items.ItemPotion;
import com.hzy.alchemycraft.recipes.AlchemyRecipes;

import net.minecraft.entity.item.EntityItem;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemFood;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.FurnaceRecipes;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.ITickable;

public class TileEntityACCauldron extends TileEntity implements  ITickable{

	public boolean CanAlchemy=false;
	public ItemStack[][] Recipes={{new ItemStack(Items.cooked_beef,2)},{new ItemStack(Items.beef,2)},{new ItemStack(ACItems.GrowthOilBottle,4),new ItemStack(ACItems.FireOilBottle,8)}};
	public ArrayList<Item>  Potions = new ArrayList();
	public int[] MoleOfPotions = new int[ACItems.DistilledMaterialBottle.length];
	public ArrayList<ItemStack>  Meterial = new ArrayList();
	public ArrayList<ItemStack> products=new ArrayList();
	
	public Random random =new Random();
	public int WaterLevel=0;
	
	public boolean collideEntityItem(EntityItem entityItem){
		int i=0;
		for(ItemStack M:Meterial){
			if(M!=null)if(M.getItem().equals(entityItem.getEntityItem())&&M.stackSize() ==entityItem.getEntityItem().stackSize)
		}
		ItemStack product = findMatchingRecipes(Meterial,Potions,Recipes);
		if(product!=null){
			if(!this.worldObj.isRemote){	
				this.worldObj.spawnEntityInWorld(new EntityItem(worldObj, pos.getX(), pos.getY(), pos.getZ(), product.copy()));	
			}else{
				this.worldObj.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, pos.getX(), pos.getY()+1, pos.getZ(),0,0,0,0);
			}
			return true;//doneAlchemy(Meterial,Recipes,Recipes[0][0].stackSize/product.stackSize);
			
		}
		return false;
	}
	
	
	
	public ItemStack findMatchingRecipes(ArrayList<ItemStack> entity,ArrayList<Item>  Ps,ItemStack[][] recipes){
		
		int goal = recipes[1].length+recipes[2].length;
		int indexOfNumber=0;
		int[] ratios = new int[goal];
		
		ArrayList<Item> Ms=new  ArrayList();
		int[] MMetas = new int[entity.size()];
		int[] MStackSizies = new int[entity.size()];
		
		int Number=0;
		for(int i=0;i<entity.size();i++){
			Ms.add(entity.get(i).getItem());
			MMetas[i]=entity.get(i).getMetadata();
			MStackSizies[i]=entity.get(i).stackSize;
		}
		
		for(int i=0;i<recipes[2].length;i++){
			if(Ps.indexOf(recipes[2][i].getItem())!=-1){
				ratios[indexOfNumber]=MoleOfPotions[getPotionMoleIndex(recipes[2][i].getItem())]/recipes[2][i].stackSize;
				indexOfNumber++;
			}
			
		}
		for(int i=0;i<recipes[1].length;i++){
			int index =Ms.indexOf(recipes[1][i].getItem());
			if(index!=-1)
				if(MMetas[index]==recipes[1][i].getMetadata()){
					ratios[indexOfNumber]=MStackSizies[index]/recipes[1][i].stackSize;
					indexOfNumber++;
				}
		}
		Arrays.sort(ratios);
		if(ratios[0]>=1){
			recipes[0][0].stackSize=recipes[0][0].stackSize*ratios[0];
			return recipes[0][0];
		}
		return null;

	}
	
	@Override
	public void update() {
		
		ArrayList<EntityItem> items = (ArrayList<EntityItem>) worldObj.getEntitiesWithinAABB(EntityItem.class, new AxisAlignedBB(pos.add(0, 0, 0), pos.add(1, 1, 1)));
		for(EntityItem ET:items)
			collideEntityItem(ET);
		
	}
	public boolean doneAlchemy(ArrayList<EntityItem> items ,ItemStack[][] recipes2, int r){
		for(ItemStack itemstack:recipes2[1]){
			for(EntityItem entity:items)
				if(entity.getEntityItem().getItem()==itemstack.getItem()&&entity.getEntityItem().getMetadata()==itemstack.getMetadata()){
					entity.getEntityItem().stackSize=entity.getEntityItem().stackSize-itemstack.stackSize*r;
				}
		}
		for(ItemStack itemstack:recipes2[2]){
			MoleOfPotions[getPotionMoleIndex(itemstack.getItem())]=MoleOfPotions[getPotionMoleIndex(itemstack.getItem())]-itemstack.stackSize*r;
			WaterLevel=WaterLevel-itemstack.stackSize*r;
		}	
		 return true;
	}


	public void addPotion(Item item) {
		Potions.add(item);
		MoleOfPotions[getPotionMoleIndex(item)]+=(getPotionMoleIndex(item)<8)?4:8;
		WaterLevel+=getPotionMoleIndex(item)<8?4:8;
	}
	
	public int getPotionMoleIndex(Item potion){
		return Item.getIdFromItem(potion)-Item.getIdFromItem(ACItems.MinorHealingPotion);
	}
}
